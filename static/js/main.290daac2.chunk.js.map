{"version":3,"sources":["Assets/img/burger-logo.png","components/Logo/Logo.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/Sidedraw/DrawToggle/SideDrawToggler.js","components/Navigation/Toolbar/Toolbar.js","components/UI/Backdrop/Backdrop.js","components/Navigation/Sidedraw/SideDraw.js","components/Layout/Layout.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","components/Burger/BuildControls/BuildControl/BuildControl.js","components/Burger/BuildControls/BuildControls.js","components/UI/Modal/Modal.js","components/UI/Button/Button.js","components/Burger/OrderSummary/OrderSummarry.js","axios-orders.js","components/UI/Spinner/Spinner.js","hoc/withErrorHandler/withErrorHandler.js","containers/BurgerBuilder/BurgerBuilder.js","store/actions/burgerBuilder.js","store/actions/actionTypes.js","store/actions/order.js","components/Burger/CheckoutSummary/CheckoutSummary.js","components/UI/Input/Input.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/Burger/Order/Order.js","containers/Orders/Orders.js","containers/Auth/Auth.js","store/actions/auth.js","App.js","serviceWorker.js","store/reducers/burgerBuilder.js","store/reducers/order.js","store/reducers/auth.js","index.js"],"names":["module","exports","logo","className","to","src","burgerLogo","alt","navigationItem","props","link","exact","children","navigationItems","sideDrawToggler","onClick","click","toolbar","backdrop","show","sideDraw","classes","join","Layout","state","showSideDraw","toggleSideDrawHandler","setState","prevState","this","Component","BurgerIngredient","ingridient","type","burger","transformedIngredients","Object","keys","ingredients","map","key","Array","_","index","flat","Infinity","length","buildControl","label","remove","disabled","amount","price","added","buildControls","controls","ingredient","word","toUpperCase","slice","ctrl","addIngredients","removeIngredients","disableInfo","eachPrice","purchasable","purchasing","modal","style","transform","opacity","button","btnType","clicked","orderSummary","item","textTransform","total","cancel","continue","instance","axios","create","baseURL","spinner","withErrorHandler","WrappedComponent","error","confirmErrorHandler","requestInterceptor","interceptors","request","use","responseInterceptor","response","res","eject","message","INGREDIENTS_PRICES","salad","bacon","meat","cheese","BurgerBuilder","purchasingHandler","continueHandler","onInitPurchase","history","push","onSetIngredients","values","reduce","el","disable","onIngredientAdded","onIngredientRemoved","totalPrice","updatePurchasable","connect","burgerBuilder","dispatch","ingName","ingredientName","get","then","data","catch","fetchIngredientFailed","checkoutSummary","input","inputElement","elementType","elementConfig","onChange","changed","value","required","option","element","displayValue","ContactData","orderForm","name","placeholder","email","address","deliveryMethod","cancelHandler","orderedHandler","event","preventDefault","orderFormId","orders","onOrderStart","changedInputHandler","id","updatedOrderForm","updatedElement","target","ElementForm","config","form","onSubmit","loading","order","orderData","post","console","log","orderId","orderSuccess","alert","orderFail","orderActions","Checkout","goBack","contactData","summary","purchased","path","match","render","Orders","onFetchOrder","reverse","fetchOrderSuccess","fetchOrderFail","auth","onAuth","password","signin","authData","returnSecureToken","url","token","userId","idToken","localId","authFail","actions","useState","setControls","isSignIn","setIsSignIn","changeValueInput","errorMessage","marginLeft","color","fontSize","submitHandler","prevMode","switchSignInHandler","App","component","Auth","Boolean","window","location","hostname","initialState","reducer","action","initState","newOrder","concat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","burgerBuilderReducer","orderReducer","authReducer","store","createStore","applyMiddleware","thunk","app","StrictMode","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.290daac2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/burger-logo.b8503d26.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport burgerLogo from '../../Assets/img/burger-logo.png';\r\nimport './Logo.css';\r\n\r\nconst logo = () => (\r\n    <div className=\"Logo\">\r\n        <Link to='/burgerbuilder'>\r\n            <img src={burgerLogo} alt=\"MyBurger\"/>\r\n        </Link>\r\n    </div>\r\n);\r\n\r\nexport default logo;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './NavigationItem.css';\r\n\r\nconst navigationItem = (props) => (\r\n    <li className=\"NavigationItem\">\r\n        <NavLink to = {props.link} exact > \r\n            {props.children}\r\n        </NavLink>\r\n    </li>\r\n);\r\n\r\nexport default navigationItem;","import React from 'react';\r\n\r\nimport './NavigationItems.css';\r\nimport NavigationItem from './NavigationItem/NavigationItem.js';\r\n\r\nconst navigationItems = () => (\r\n    <ul className=\"NavigationItems\">\r\n        <NavigationItem link='/burgerbuilder'>Burger Builder</NavigationItem>\r\n        <NavigationItem link='/orders'>Checkout</NavigationItem>\r\n        <NavigationItem link='/auth'>Authenticate</NavigationItem>\r\n    </ul>\r\n);\r\n\r\nexport default navigationItems;","import React from 'react';\r\n\r\nimport './SideDrawToggler.css';\r\n\r\nconst sideDrawToggler = (props) => (\r\n    <div \r\n        onClick = {props.click} \r\n        className=\"DrawerToggle\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n)\r\n\r\nexport default sideDrawToggler;","import React from 'react';\r\n\r\nimport './Toolbar.css';\r\nimport Logo from '../../Logo/Logo';\r\nimport NavigationItems from '../NavigationItems/NavigationItems';\r\nimport SideDrawToggler from '../Sidedraw/DrawToggle/SideDrawToggler';\r\n\r\nconst toolbar = (props) => (\r\n    <header className=\"Toolbar\">\r\n        <SideDrawToggler click = {props.click} />\r\n\r\n        <div className=\"DivLogo\">\r\n            <Logo/>\r\n        </div>\r\n\r\n        <nav className=\"DesktopOnly\">\r\n            <NavigationItems />\r\n        </nav>\r\n    </header>\r\n);\r\n\r\nexport default toolbar;","import React from 'react';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = (props) => {\r\n    return props.show ? <div className=\"Backdrop\" onClick = {props.click} ></div> : null;\r\n}\r\n\r\nexport default backdrop;","import React from 'react';\r\n\r\nimport Logo from '../../Logo/Logo';\r\nimport NavigationItems from '../NavigationItems/NavigationItems';\r\nimport './SideDraw.css';\r\nimport Backdrop from '../../UI/Backdrop/Backdrop';\r\n\r\nconst sideDraw = (props) => {\r\n    let classes = ['SideDraw',props.show ? 'Open' : 'Close'].join(' ');\r\n\r\n    return (\r\n        <>\r\n            <Backdrop \r\n                show = {props.show}\r\n                click = {props.click} \r\n            />\r\n            <div className= {classes}>\r\n                <div className=\"SideDrawLogo\">\r\n                    <Logo />\r\n                </div>\r\n\r\n                <nav>\r\n                    <NavigationItems/>\r\n                </nav>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default sideDraw;","import React, {Component} from 'react';\r\n\r\nimport './Layout.css';\r\nimport Toolbar from '../Navigation/Toolbar/Toolbar';\r\nimport SideDraw from '../Navigation/Sidedraw/SideDraw';\r\n\r\nclass Layout extends Component {\r\n    state = {\r\n        showSideDraw: false,\r\n    }\r\n\r\n    toggleSideDrawHandler = () => {\r\n        this.setState(prevState => {\r\n            return { \r\n                showSideDraw: !prevState.showSideDraw,\r\n            };\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <>\r\n                <Toolbar click = {this.toggleSideDrawHandler} />\r\n                <SideDraw \r\n                    click = {this.toggleSideDrawHandler} \r\n                    show = {this.state.showSideDraw}\r\n                />\r\n                <main className='content'>\r\n                    {this.props.children}\r\n                </main>\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Layout;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './BurgerIngredient.css';\r\n\r\nclass BurgerIngredient extends Component {\r\n    render() {\r\n        let ingridient = null;\r\n\r\n        switch (this.props.type) {\r\n            case ('bread-bottom'):\r\n                ingridient = <div className=\"BreadBottom\"></div>;\r\n                break;\r\n\r\n            case ('bread-top'): \r\n                ingridient = (\r\n                    <div className=\"BreadTop\">\r\n                        <div className=\"Seeds1\"></div>\r\n                        <div className=\"Seeds2\"></div>\r\n                    </div>);\r\n                break;\r\n\r\n            case ('meat'):\r\n                ingridient = <div className=\"Meat\"></div>;\r\n                break;\r\n\r\n            case ('cheese'):\r\n                ingridient = <div className=\"Cheese\"></div>;\r\n                break;\r\n\r\n            case ('bacon'):\r\n                ingridient = <div className=\"Bacon\"></div>;\r\n                break;\r\n\r\n            case ('salad'):\r\n                ingridient = <div className=\"Salad\"></div>;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        };\r\n        \r\n        return ingridient;\r\n    }\r\n}\r\n\r\nBurgerIngredient.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n\r\n}\r\n\r\nexport default BurgerIngredient;","import React from 'react';\r\n\r\nimport './Burger.css';\r\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient.js';\r\n\r\nconst burger = ( props ) => {\r\n    let transformedIngredients = \r\n        Object.keys(props.ingredients).map( key => {\r\n                return [...Array(props.ingredients[key])].map((_, index) => {\r\n                        return <BurgerIngredient type={key} key={key + index} />\r\n                        });\r\n                }).flat(Infinity);\r\n    \r\n    if (!transformedIngredients.length) {\r\n        transformedIngredients = <p className=\"Nothing\">Please add your ingredients :)</p>\r\n    }\r\n\r\n    return (\r\n        <div className=\"Burger\">\r\n            <BurgerIngredient type=\"bread-top\" />\r\n            {transformedIngredients}\r\n            <BurgerIngredient type=\"bread-bottom\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default burger;","import React from 'react';\r\n\r\nimport './BuildControl.css';\r\n\r\nconst buildControl = (props) => (\r\n    <div className={`BuildControl`}>\r\n        <div className=\"Label\">{props.label}</div>\r\n        <button \r\n            className=\"Less\" \r\n            onClick = {props.remove}\r\n            disabled = {props.disabled}\r\n            >Less\r\n        </button>\r\n        <p>{props.amount} x $ {props.price}</p>\r\n        <button \r\n            className=\"More\" \r\n            onClick = {props.added}\r\n            >More\r\n        </button>\r\n    </div>\r\n);\r\n\r\nexport default buildControl;","import React from 'react';\r\n\r\nimport './BuildControls.css';\r\nimport BuildControl from './BuildControl/BuildControl.js';\r\n\r\nfunction capitalize(word) {\r\n    return word[0].toUpperCase() + word.slice(1);\r\n}\r\n\r\nconst buildControls = (props) => {\r\n    const controls = Object.keys(props.ingredients)\r\n            .map(ingredient => {\r\n                return {\r\n                    label: capitalize(ingredient), \r\n                    type: ingredient,\r\n                };\r\n            });\r\n\r\n    return (\r\n        <div className=\"BuildControls\">\r\n            <p>Total price is: $ <b>{props.price}</b></p>\r\n            {controls.map(ctrl => (\r\n                <BuildControl \r\n                    key = {ctrl.label} \r\n                    label = {ctrl.label} \r\n                    type = {ctrl.type}\r\n                    added = {() => props.addIngredients(ctrl.type) }\r\n                    remove = {() => props.removeIngredients(ctrl.type) }\r\n                    disabled = {props.disableInfo[ctrl.type]}\r\n                    amount = {props.ingredients[ctrl.type]}\r\n                    price = {props.eachPrice[ctrl.type]}\r\n                />\r\n            ))}\r\n            <button \r\n                className = \"OrderButton\"\r\n                disabled = {!props.purchasable}\r\n                onClick = {props.purchasing}\r\n                >Order Now</button>\r\n        </div>\r\n)};\r\n\r\nexport default buildControls;","import React, {Component} from 'react';\r\n\r\nimport './Modal.css';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n\r\nclass modal extends Component {\r\n    render () {\r\n        return (\r\n            <>\r\n                <Backdrop show = {this.props.show} click = {this.props.click} />\r\n                <div className = \"Modal\"\r\n                    style = {{transform: `translateY(${this.props.show ? 0 : -100}vh)`,\r\n                            opacity: this.props.show ? 1 : 0,}}>\r\n    \r\n                    {this.props.children}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default modal;","import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst button = (props) => (\r\n    <button\r\n        className = {['Button', props.btnType].join(' ')}\r\n        onClick = {props.clicked}\r\n        disabled = {props.disabled}\r\n    >\r\n        {props.children}\r\n    </button>\r\n);\r\n\r\nexport default button;","import React from 'react';\r\n\r\nimport './OrderSummary.css';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nconst orderSummary = (props) => {\r\n    return (\r\n        < >\r\n            <h3>Your Order</h3>\r\n            <p>A delicious burger with the following ingredients:</p>\r\n            <ul>\r\n                {Object.keys(props.ingredients).map(item => {\r\n                    return (\r\n                        <li className=\"OrderSummary\" key={item}>\r\n                            <span style={{textTransform: 'capitalize'}}>{item}</span>: {props.ingredients[item]}\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n            <p>Total price: $ {props.total}</p>\r\n            <p>Continue to checkout?</p>\r\n            <Button btnType='Danger' clicked={props.cancel}>CANCEL</Button>\r\n            <Button btnType='Success' clicked={props.continue}>CONTINUE</Button>\r\n        </ >\r\n    );\r\n};\r\n\r\n\r\nexport default orderSummary;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://my-burger-phl.firebaseio.com/',\r\n\r\n});\r\n\r\nexport default instance;","import React from 'react';\r\n\r\nimport './Spinner.css';\r\n\r\nconst spinner = () => (\r\n    <div className=\"Spinner-Loader\">\r\n        Loading...\r\n    </div>\r\n);\r\n\r\n\r\nexport default spinner;","import React, { Component } from 'react';\r\n\r\nimport Modal from '../../components/UI/Modal/Modal';\r\n\r\nconst withErrorHandler = (WrappedComponent, axios) => {\r\n    return class extends Component {\r\n        state = {\r\n            error: null,\r\n        }\r\n\r\n        componentDidMount() {\r\n            this.requestInterceptor = axios.interceptors.request.use(request => {\r\n                this.confirmErrorHandler();\r\n                return request;\r\n            })\r\n            this.responseInterceptor = axios.interceptors.response.use(res => res, error => {\r\n                this.setState({error: error});\r\n            })\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            axios.interceptors.request.eject(this.requestInterceptor);\r\n            axios.interceptors.response.eject(this.responseInterceptor);\r\n        }\r\n\r\n        confirmErrorHandler = () => {\r\n            this.setState({error: null});\r\n        }\r\n\r\n        render () {\r\n            return (\r\n                <>  \r\n                    <Modal \r\n                        show = {this.state.error}\r\n                        click = {this.confirmErrorHandler}\r\n                    >\r\n                        {this.state.error ? this.state.error.message : null}\r\n                    </Modal>\r\n\r\n                    <WrappedComponent {...this.props} />\r\n                </>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default withErrorHandler;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Burger from '../../components/Burger/Burger';\r\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummarry';\r\nimport axios from '../../axios-orders';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport './BurgerBuilder.css';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst INGREDIENTS_PRICES = {\r\n    salad: 1,\r\n    bacon: 2,\r\n    meat: 3,\r\n    cheese: 0.5,\r\n}\r\n\r\nclass BurgerBuilder extends Component {\r\n    state = {\r\n        purchasing: false,\r\n    }\r\n\r\n    //TODO: nhận dữ liệu từ backend\r\n    componentDidMount() {\r\n        // console.log('[BurgerBuilder.js] ComponentDidMount');\r\n        // axios.get('/ingredients.json')\r\n        //     .then(response => {\r\n        //         this.setState({ingredients: response.data});\r\n        //     })\r\n        //     .catch(error => {\r\n        //         this.setState({error: error.message});\r\n        //     })\r\n        this.props.onSetIngredients();\r\n    }\r\n\r\n    //TODO: không có ingredient nào thì nút Purchase bị disable\r\n    updatePurchasable(ingredients) {\r\n        return Object.values(ingredients)\r\n            .reduce((total, el) => total + el) > 0;\r\n    }\r\n\r\n    //TODO: hiện bảng xác nhận purchase\r\n    purchasingHandler = () => {\r\n        this.setState({purchasing: !this.state.purchasing});\r\n    }\r\n\r\n    //TODO: khi xác nhận purchase, gửi dữ liệu tới backend\r\n    continueHandler = () => {\r\n        // this.setState({loading: true, error: null});\r\n\r\n        // const orders = {\r\n        //     ingredients: this.props.ingredients,\r\n        //     price: this.state.price,\r\n        // };\r\n\r\n        // axios.post('/orders.json', orders)\r\n        //     .then(() => {\r\n        //         this.setState({loading: false, purchasing: false});\r\n        //         alert('Your order has been sent!');\r\n        //     })\r\n        //     .catch(error => {\r\n        //         console.log(error);\r\n        //         this.setState({loading: false, purchasing: false});\r\n        //     });\r\n        \r\n        // const queryParams = [];\r\n        // for (const item in this.props.ingredients) {\r\n        //     queryParams.push(`${encodeURIComponent(item)}=${encodeURIComponent(this.props.ingredients[item])}`);\r\n        // }\r\n        // queryParams.push(`price=${this.state.price}`);\r\n\r\n        // this.props.history.push({\r\n        //     pathname: '/checkout',\r\n        //     search: '?' + queryParams.join('&'),\r\n        // });\r\n        this.props.onInitPurchase();\r\n        this.props.history.push('/checkout');\r\n    }\r\n\r\n    render() {\r\n        const disable = {\r\n            ...this.props.ingredients,\r\n        }\r\n\r\n        for (const item in disable) {\r\n            disable[item] = disable[item] <= 0;\r\n        }\r\n\r\n        let orderSummary = null;\r\n        let burger = this.props.error ? \r\n            <div className=\"BurgerBuilder-error\"> \r\n                <p>Ingredients can't be loaded</p> \r\n                <p>Error: {this.props.error}</p>\r\n            </div>\r\n            : <Spinner />;\r\n            \r\n        \r\n        if (this.props.ingredients) {\r\n            burger = (\r\n                <>\r\n                    <Burger ingredients={this.props.ingredients} />\r\n\r\n                    <BuildControls \r\n                        ingredients={this.props.ingredients}\r\n                        addIngredients = {this.props.onIngredientAdded}\r\n                        removeIngredients = {this.props.onIngredientRemoved}\r\n                        disableInfo = {disable}\r\n                        price = {this.props.totalPrice}\r\n                        purchasable = {this.updatePurchasable(this.props.ingredients)}\r\n                        purchasing = {this.purchasingHandler}\r\n                        eachPrice = {INGREDIENTS_PRICES}\r\n                    /> \r\n                </>\r\n            );\r\n            orderSummary =  <OrderSummary \r\n                    ingredients = {this.props.ingredients} \r\n                    total = {this.props.totalPrice}\r\n                    cancel = {this.purchasingHandler}\r\n                    continue = {this.continueHandler}\r\n                    />;\r\n        }\r\n\r\n        // if (this.state.loading) {\r\n        //     orderSummary = <Spinner />;\r\n        // }\r\n\r\n        return (\r\n            <>\r\n                <Modal \r\n                    show = {this.state.purchasing}\r\n                    click = {this.purchasingHandler}\r\n                >\r\n                    {orderSummary}\r\n                </Modal>\r\n\r\n                {burger}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        totalPrice: state.burgerBuilder.totalPrice,\r\n        error: state.burgerBuilder.error,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onIngredientAdded: (ingName) => dispatch(actions.addIngredient(ingName)),\r\n        onIngredientRemoved: (ingName) => dispatch(actions.removeIngredient(ingName)),\r\n        onSetIngredients: () => dispatch(actions.initIngredient()),\r\n        onInitPurchase: () => dispatch(actions.purchaseInit()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));","import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios-orders';\r\n\r\nexport const addIngredient = (name) => {\r\n    return {\r\n        type: actionTypes.ADD_INGREDIENT,\r\n        ingredientName: name,\r\n    };\r\n};\r\n\r\nexport const removeIngredient = (name) => {\r\n    return {\r\n        type: actionTypes.REMOVE_INGREDIENT,\r\n        ingredientName: name,\r\n    };\r\n};\r\n\r\nexport const setIngredient = (ingredients) => {\r\n    return {\r\n        type: actionTypes.SET_INGREDIENT,\r\n        ingredients: ingredients,\r\n        totalPrice: 2,\r\n    }\r\n}\r\n\r\nexport const fetchIngredientFailed = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_INGREDIENT_FAILED,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const initIngredient = () => {\r\n    return dispatch => {\r\n        axios.get('/ingredients.json')\r\n            .then(response => {\r\n                dispatch(setIngredient(response.data));\r\n            })\r\n            .catch((error) => {\r\n                dispatch(fetchIngredientFailed(error.message));\r\n            })\r\n    }\r\n}","export const ADD_INGREDIENT = 'ADD_INGREDIENT';\r\nexport const REMOVE_INGREDIENT = 'REMOVE_INGREDIENT';\r\nexport const SET_INGREDIENT = 'SET_INGREDIENT';\r\nexport const FETCH_INGREDIENT_FAILED = 'FETCH_INGREDIENT_FAILED';\r\n\r\nexport const PURCHASE_BURGER_START = 'PURCHASE_BURGER_START';\r\nexport const ORDER_SUCCESS = 'ORDER_SUCCESS';\r\nexport const ORDER_FAILED = 'ORDER_FAILED';\r\nexport const PURCHASE_INIT = 'PURCHASE_INIT';\r\n\r\nexport const FETCH_ORDERS_START = 'FETCH_ORDERS_START';\r\nexport const FETCH_ORDERS_SUCCESS = 'FETCH_ORDERS_SUCCESS';\r\nexport const FETCH_ORDERS_FAIL = 'FETCH_ORDERS_FAIL';\r\n\r\nexport const AUTH_START = 'AUTH_START';\r\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\r\nexport const AUTH_FAIL = 'AUTH_FAIL';\r\n","import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios-orders';\r\n\r\nconst orderSuccess = (id, orderData) => {\r\n    return {\r\n        type: actionTypes.ORDER_SUCCESS,\r\n        orderData: orderData,\r\n        orderId: id,\r\n    };\r\n};\r\n\r\nconst orderFail = (error) => {\r\n    return {\r\n        type: actionTypes.ORDER_FAILED,\r\n        error: error,\r\n    };\r\n};\r\n\r\nconst orderStart = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_START,\r\n    }\r\n}\r\n\r\nexport const order = (orderData) => {\r\n    return dispatch => {\r\n        dispatch(orderStart());\r\n\r\n        axios.post('/orders.json', orderData)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                dispatch(orderSuccess(response.data.name, orderData));\r\n                alert('Your order has been sent!');\r\n            })\r\n            .catch(error => {\r\n                dispatch(orderFail(error));\r\n            });\r\n    }\r\n}\r\n\r\nexport const purchaseInit = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_INIT,\r\n    }\r\n}\r\n\r\nconst fetchOrderStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_START,\r\n    }\r\n}\r\n\r\nconst fetchOrderSuccess = (orders) => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\r\n        orders: orders,\r\n    }\r\n}\r\n\r\nconst fetchOrderFail = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const fetchOrder = () => {\r\n    return dispatch => {\r\n        dispatch(fetchOrderStart());\r\n\r\n        axios.get('/orders.json')\r\n            .then(response => {\r\n                const orders = [];\r\n                for (const item in response.data) {\r\n                    orders.push({\r\n                        ...response.data[item],\r\n                        key: item,\r\n                    });\r\n                }\r\n                dispatch(fetchOrderSuccess(orders));\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                dispatch(fetchOrderFail(error.message));\r\n            })\r\n    }\r\n}","import React from 'react';\r\n\r\nimport './CheckoutSummary.css';\r\nimport Burger from '../Burger';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className=\"CheckoutSummary\">\r\n            <h1>We hope it taste well!</h1>\r\n            <div className=\"CheckoutSummary-div\">\r\n                <Burger ingredients = {props.ingredients} />\r\n            </div>\r\n            <Button \r\n                btnType = \"Danger\"\r\n                clicked = {props.cancel}\r\n            >CANCEL\r\n            </Button>\r\n            <Button \r\n                btnType = \"Success\"\r\n                clicked = {props.continue}\r\n            >CONTINUE\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React from 'react';\r\n\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n\r\n    switch (props.elementType) {\r\n        case('input'):\r\n            inputElement = <input\r\n                className=\"Input-element\"\r\n                {...props.elementConfig}\r\n                onChange = {props.changed}\r\n                value = {props.value}\r\n                type = {props.elementConfig.type}\r\n                required\r\n                />;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea\r\n                className=\"Input-element\"\r\n                onChange = {props.changed}\r\n                value = {props.value}\r\n                {...props.elementConfig}\r\n                />;\r\n            break;\r\n        case('select'):\r\n            inputElement = <select\r\n                className=\"Input-element\"\r\n                value = {props.value}\r\n                onChange = {props.changed}\r\n                >\r\n                    {props.elementConfig.option.map(element => (\r\n                        <option key = {element.value} value = {element.value}> {element.displayValue} </option>\r\n                    ))}\r\n                </select>;\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className=\"Input-element\"\r\n                onChange = {props.changed}\r\n                value = {props.value}\r\n                {...props.elementConfig}\r\n                />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"Input-input\">\r\n            <label className=\"Input-label\">{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './ContactData.css';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as orderActions from '../../../store/actions/index';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                label: 'Your Name:',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Enter your name',\r\n                },\r\n                value: '',\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                label: 'Your mail',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Enter your mail',\r\n                },\r\n                value: '',\r\n            },\r\n            address: {\r\n                elementType: 'input',\r\n                label: 'Your address',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Enter your address',\r\n                },\r\n                value: '',\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                label: 'Delivery method',\r\n                elementConfig: {\r\n                    option: [\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}, \r\n                        {value: 'fastest', displayValue: 'Fastest'}\r\n                    ],\r\n                },\r\n                value: 'cheapest',\r\n            },\r\n            option: {\r\n                elementType: 'textarea',\r\n                label: 'Your description',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Enter your description',\r\n                },\r\n                value: '',\r\n            },\r\n        },\r\n    }\r\n\r\n    cancelHandler = () => {\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    orderedHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const orderForm = {};\r\n        for (const orderFormId in this.state.orderForm) {\r\n            orderForm[orderFormId] = this.state.orderForm[orderFormId].value;\r\n        }\r\n\r\n        const orders = {\r\n            ingredients: this.props.ingredients,\r\n            price: this.props.totalPrice,\r\n            orderForm: orderForm,\r\n        };\r\n\r\n        this.props.onOrderStart(orders);\r\n    }\r\n\r\n    changedInputHandler = (event, id) => {\r\n        const updatedOrderForm = {...this.state.orderForm};\r\n        const updatedElement = {...updatedOrderForm[id]};\r\n        updatedElement.value = event.target.value;\r\n        updatedOrderForm[id] = updatedElement;\r\n        this.setState({orderForm: updatedOrderForm});\r\n    }\r\n\r\n    render() {\r\n        let ElementForm = [];\r\n\r\n        for (const key in this.state.orderForm) {\r\n            ElementForm.push({\r\n                id: key,\r\n                config: this.state.orderForm[key],\r\n            })\r\n        }\r\n\r\n        ElementForm = ElementForm.map(element => (\r\n            <Input \r\n                key = {element.id}\r\n                elementType = {element.config.elementType}\r\n                elementConfig = {element.config.elementConfig}\r\n                value = {element.config.value}\r\n                label = {element.config.label}\r\n                changed = {event => this.changedInputHandler(event, element.id)}\r\n            />\r\n        ))\r\n\r\n        let form = (\r\n            <>\r\n                <h3>Please enter your info:</h3>\r\n                <form onSubmit = {this.orderedHandler}>\r\n                    {ElementForm}\r\n                    <div className=\"ContactData-button\">\r\n                        <Button btnType = \"Danger\" clicked = {this.cancelHandler} >Cancel</Button>\r\n                        <Button btnType = \"Success\" >Order</Button>\r\n                    </div>\r\n                </form>\r\n            </>\r\n        );\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        return (\r\n            <div className=\"ContactData\">\r\n                {form}\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        totalPrice: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderStart: (orderData) => dispatch(orderActions.order(orderData)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Burger/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nclass Checkout extends Component {\r\n    // componentDidMount() {\r\n    //     let price = 0;\r\n    //     const ingredients = {};\r\n    //     const query = new URLSearchParams(this.props.location.search);\r\n\r\n    //     for (const [item, quality] of query.entries()) {\r\n    //         if (item === 'price') {\r\n    //             price = +quality;\r\n    //         } else {\r\n    //             ingredients[item] = +quality;\r\n    //         }\r\n    //     }\r\n\r\n    //     this.setState({ingredients: ingredients, price: price});\r\n    // }\r\n\r\n    cancelHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    continueHandler = () => {\r\n        this.props.history.push('/checkout/contact-info');\r\n    }\r\n\r\n    render () {\r\n        const contactData = (\r\n            <ContactData \r\n                {...this.props}\r\n                />\r\n        );\r\n\r\n        let summary = (<Redirect to = '/' />);\r\n        let purchased = this.props.purchased ? <Redirect to='/burger-builder' /> : null;\r\n\r\n        if (this.props.ingredients) {\r\n            summary = (\r\n                <>\r\n                    <Switch>\r\n                        {purchased}\r\n                        <Route path = {this.props.match.path + '/contact-info'} \r\n                            render = {() => contactData} \r\n                        />\r\n\r\n                        <CheckoutSummary \r\n                            ingredients = {this.props.ingredients} \r\n                            cancel = {this.cancelHandler}\r\n                            continue = {this.continueHandler}\r\n                        />\r\n                    </Switch>\r\n                </>\r\n            )\r\n        }\r\n        return (\r\n            <div >\r\n                {summary}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\n\r\nimport './Order.css';\r\n\r\nconst order = (props) => {\r\n    const ingredients = \r\n            Object.keys(props.ingredients)\r\n            .map(ingredient => {\r\n                return `${ingredient} (${props.ingredients[ingredient]})`\r\n            }).join(', ');\r\n\r\n    return (\r\n        <div className=\"Order\">\r\n            <p>Ingredients: {ingredients} </p>\r\n            <p>Price: <b> $ {props.price}</b></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default order;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Order from '../../components/Burger/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nclass Orders extends Component {\r\n    componentDidMount() {\r\n        this.props.onFetchOrder();\r\n    }\r\n\r\n    render() {\r\n        let order = <Spinner />;\r\n        if (this.props.orders.length) {\r\n            order = this.props.orders.map(order => {\r\n                return (\r\n                    <Order \r\n                        key = {order.key} \r\n                        ingredients = {order.ingredients} \r\n                        price = {order.price}\r\n                    />\r\n                );\r\n            }).reverse();\r\n        }\r\n        return (\r\n            <div>\r\n                {order}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders: state.order.orders,\r\n        loading: state.order.loading,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrder: () => dispatch(actions.fetchOrder()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nfunction Auth(props) {\r\n    const [controls, setControls] = useState({\r\n        email: {\r\n            elementType: 'input',\r\n            label: 'Email:',\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: 'Enter your mail',\r\n            },\r\n            value: '',\r\n        },\r\n        password: {\r\n            elementType: 'input',\r\n            label: 'Password:',\r\n            elementConfig: {\r\n                type: 'password',\r\n                placeholder: 'Enter your password',\r\n            },\r\n            value: '',\r\n        },\r\n    });\r\n\r\n    const [isSignIn, setIsSignIn] = useState(true);\r\n\r\n    function switchSignInHandler(event) {\r\n        event.preventDefault();\r\n        setIsSignIn(prevMode => !prevMode);\r\n    }\r\n\r\n    function changeValueInput(event, id) {\r\n        setControls({\r\n            ...controls,\r\n            [id]: {\r\n                ...controls[id],\r\n                value: event.target.value,\r\n            }\r\n        });\r\n    }\r\n\r\n    function submitHandler(event) {\r\n        event.preventDefault();\r\n        props.onAuth(controls.email.value, controls.password.value, isSignIn);\r\n    }\r\n\r\n    let ElementForm = [];\r\n    for (const key in controls) {\r\n        ElementForm.push({\r\n            id: key,\r\n            config: controls[key],\r\n        })\r\n    }\r\n    ElementForm = ElementForm.map(element => (\r\n        <Input \r\n            key = {element.id}\r\n            elementType = {element.config.elementType}\r\n            elementConfig = {element.config.elementConfig}\r\n            value = {element.config.value}\r\n            label = {element.config.label}\r\n            changed = {event => changeValueInput(event,element.id)}\r\n        />\r\n    ))\r\n\r\n    const errorMessage = props.error ? <p style = {{marginLeft: '24px', color: 'red', fontSize: '18px,'}}> Invalid email/password! </p>: null;\r\n\r\n    let form = (\r\n        <>\r\n            <form onSubmit = {event => submitHandler(event)}>\r\n                <h1>{isSignIn ? 'SIGN IN:' : 'SIGN UP:'}</h1>\r\n                {errorMessage}\r\n                {ElementForm}\r\n                <div className=\"ContactData-button\">\r\n                    <Button btnType = \"Danger\" clicked = {() => props.history.push('/')} >Cancel</Button>\r\n                    <Button btnType = \"Success\">{isSignIn ? 'Sign in' : 'Sign up'}</Button>\r\n                </div>\r\n                <div className=\"ContactData-button\">\r\n                    <Button btnType = \"Danger\" clicked = {event => switchSignInHandler(event)} >SWITCH TO {!isSignIn ? 'SIGN IN' : 'SIGN UP'}</Button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <div className=\"ContactData\">\r\n            {!props.loading ? form : <Spinner />}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, signin) => dispatch(actions.auth(email, password, signin)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import * as actionTypes from './actionTypes';\r\nimport axios from 'axios'\r\n\r\nconst authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START,\r\n    }\r\n}\r\n\r\nconst authSuccess = (token, userId) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        token: token,\r\n        userId: userId,\r\n    }\r\n}\r\n\r\nconst authFail = (error) => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const auth = (email, password, signin) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        const authData = {\r\n            email: email,\r\n            password: password,\r\n            returnSecureToken: true,\r\n        };\r\n\r\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC0xU5IY388ZsqD3FO_qP43EvEZgTHQOH8';\r\n        if (signin) url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC0xU5IY388ZsqD3FO_qP43EvEZgTHQOH8';\r\n\r\n        axios.post(url, authData)\r\n            .then(response => {\r\n                // console.log(response);\r\n                dispatch(authSuccess(response.data.idToken, response.data.localId))\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                // console.log(error.message);\r\n                dispatch(authFail(error));\r\n            })\r\n    }\r\n}","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Layout from './components/Layout/Layout';\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder';\nimport Checkout from './containers/Checkout/Checkout';\nimport Orders from './containers/Orders/Orders';\nimport Auth from './containers/Auth/Auth';\n\nfunction App() {\n  return (\n    <div >\n      <Layout>\n        <Switch>\n          <Route path=\"/orders\" component = {Orders} />\n          <Route path=\"/checkout\" component = {Checkout} />\n          <Route path=\"/auth\" component = {Auth} />\n          <Route component = {BurgerBuilder} />\n        </Switch>\n\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionType from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    ingredients: null,\r\n    totalPrice: 2,\r\n    error: null,\r\n};\r\n\r\nconst INGREDIENTS_PRICES = {\r\n    salad: 1,\r\n    bacon: 2,\r\n    meat: 3,\r\n    cheese: 0.5,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionType.ADD_INGREDIENT:\r\n            return {\r\n                ...state,\r\n                ingredients: {\r\n                    ...state.ingredients,\r\n                    [action.ingredientName]: state.ingredients[action.ingredientName] + 1,\r\n                },\r\n                totalPrice: state.totalPrice + INGREDIENTS_PRICES[action.ingredientName],\r\n            };\r\n\r\n        case actionType.REMOVE_INGREDIENT:\r\n            return {\r\n                ...state,\r\n                ingredients: {\r\n                    ...state.ingredients,\r\n                    [action.ingredientName]: state.ingredients[action.ingredientName] - 1,\r\n                },\r\n                totalPrice: state.totalPrice - INGREDIENTS_PRICES[action.ingredientName],\r\n            };\r\n        \r\n        case actionType.SET_INGREDIENT:\r\n            return {\r\n                ...state,\r\n                ingredients: action.ingredients,\r\n                totalPrice: action.totalPrice,\r\n                error: null,\r\n            };\r\n\r\n        case actionType.FETCH_INGREDIENT_FAILED: \r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n            }\r\n            \r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n\r\n","import * as actionType from '../actions/actionTypes';\r\n\r\nconst initState = {\r\n    orders: [],\r\n    loading: false,\r\n    purchased: false,\r\n}\r\n\r\nconst reducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case actionType.PURCHASE_INIT:\r\n            return {\r\n                ...state,\r\n                purchased: false,\r\n            }\r\n\r\n        case actionType.PURCHASE_BURGER_START:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n\r\n        case actionType.ORDER_SUCCESS:\r\n            const newOrder = {\r\n                ...action.orderData,\r\n                id: action.orderId,\r\n            }\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                order: state.orders.concat(newOrder),\r\n                purchased: true,\r\n            };\r\n\r\n        case actionType.ORDER_FAILED:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n            };\r\n\r\n        case actionType.FETCH_ORDERS_START: {\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        }\r\n\r\n        case actionType.FETCH_ORDERS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                orders: action.orders,\r\n            }\r\n        }\r\n\r\n        case actionType.FETCH_ORDERS_FAIL: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    token: null,\r\n    userId: null,\r\n    error: null,\r\n    loading: false,\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.AUTH_START:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null,\r\n            }\r\n\r\n        case actionTypes.AUTH_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                token: action.token,\r\n                userId: action.userId,\r\n                error: null,\r\n            }\r\n\r\n        case actionTypes.AUTH_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error,\r\n            }\r\n\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport burgerBuilderReducer from './store/reducers/burgerBuilder';\nimport orderReducer from './store/reducers/order';\nimport authReducer from './store/reducers/auth'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n  burgerBuilder: burgerBuilderReducer,\n  order: orderReducer,\n  auth: authReducer,\n})\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nconst app = (\n  <Provider store = {store} > \n    <BrowserRouter>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}